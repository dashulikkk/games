using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace TicTacToe
{
    public partial class Form1 : Form
    {
        private const int BOARD_SIZE = 3;
        private const int CELL_SIZE = 100;

        private int[,] _board = new int[BOARD_SIZE, BOARD_SIZE];
        private int _currentPlayer = 1;
        private bool _gameOver = false;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            NewGame();
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;

            for (int i = 0; i < BOARD_SIZE; i++)
            {
                for (int j = 0; j < BOARD_SIZE; j++)
                {
                    Rectangle rect = new Rectangle(i * CELL_SIZE + 10, j * CELL_SIZE + 10, CELL_SIZE - 20, CELL_SIZE - 20);
                    g.DrawRectangle(Pens.Black, rect);
                }
            }

            for (int i = 0; i < BOARD_SIZE; i++)
            {
                for (int j = 0; j < BOARD_SIZE; j++)
                {
                    if (_board[i, j] == 1)
                    {
                        g.DrawLine(Pens.Red, new Point(i * CELL_SIZE + 20, j * CELL_SIZE + 20), new Point(i * CELL_SIZE + CELL_SIZE - 20, j * CELL_SIZE + CELL_SIZE - 20));
                        g.DrawLine(Pens.Red, new Point(i * CELL_SIZE + CELL_SIZE - 20, j * CELL_SIZE + 20), new Point(i * CELL_SIZE + 20, j * CELL_SIZE + CELL_SIZE - 20));
                    }
                    else if (_board[i, j] == 2)
                    {
                        g.DrawEllipse(Pens.Green, new Rectangle(i * CELL_SIZE + 20, j * CELL_SIZE + 20, CELL_SIZE - 40, CELL_SIZE - 40));
                    }
                }
            }

            if (_gameOver)
            {
                string message = "Победили ";
                if (_currentPlayer == 1)
                    message += "крестики!";
                else
                    message += "нолики!";

                g.DrawString(message, new Font("Arial", 20), Brushes.Black, new PointF(50, 50));
            }
        }

        private void Form1_MouseClick(object sender, MouseEventArgs e)
        {
            if (_gameOver)
                return;

            int x = e.X / CELL_SIZE;
            int y = e.Y / CELL_SIZE;

            if (_board[x, y] == 0)
            {
                _board[x, y] = _currentPlayer;
                _currentPlayer = 3 - _currentPlayer;
                Invalidate();

                if (CheckForWinner())
                {
                    _gameOver = true;
                }
            }
        }

        private bool CheckForWinner()
        {
            for (int i = 0; i < BOARD_SIZE; i++)
            {
                if (_board[i, 0] == _board[i, 1] && _board[i, 1] == _board[i, 2] && _board[i, 0] != 0)
                {
                    return true;
                }
            }

            for (int j = 0; j < BOARD_SIZE; j++)
            {
                if (_board[0, j] == _board[1, j] && _board[1, j] == _board[2, j] && _board[0, j] != 0)
                {
                    return true;
                }
            }

            if (_board[0, 0] == _board[1, 1] && _board[1, 1] == _board[2, 2] && _board[0, 0] != 0)
            {
                return true;
            }

            if (_board[0, 2] == _board[1, 1] && _board[1, 1] == _board[2, 0] && _board[0, 2] != 0)
            {
                return true;
            }

            bool draw = true;
            for (int i = 0; i < BOARD_SIZE; i++)
            {
                for (int j = 0; j < BOARD_SIZE; j++)
                {
                    if (_board[i, j] == 0)
                    {
                        draw = false;
                        break;
                    }
                }
            }

            return draw;
        }

        private void NewGame()
        {
            for (int i = 0; i < BOARD_SIZE; i++)
            {
                for (int j = 0; j < BOARD_SIZE; j++)
                {
                    _board[i, j] = 0;
                }
            }

            _currentPlayer = 1;
            _gameOver = false;
            Invalidate();
        }

        private void newGameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NewGame();
        }
        
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
}
